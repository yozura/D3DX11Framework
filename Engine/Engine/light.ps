Texture2D shaderTexture;
SamplerState SampleType;

// 조명과 색의 방향을 담는 상수 버퍼
cbuffer LightBuffer
{
	float4 diffuseColor;
	float4 lightDirection;
	float padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	// 텍스처 좌표 위치에서 샘플러를 사용해 텍스처의 픽셀 색상을 샘플링합니다.
	textureColor = shaderTexture.Sample(SampleType, input.tex);

	// 연산을 위해 광선의 방향을 반전시킵니다.
	lightDir = -lightDirection;

	// 이 픽셀의 광량을 계산합니다.
	lightIntensity = saturate(dot(input.normal, lightDir));

	// 광도와 결합된 확산 색상에 따라 확산 색상의 최종 양을 결정합니다.
	color = saturate(diffuseColor * lightIntensity);

	// 텍스처 픽셀과 최종 확산 색상을 곱하면 최종 픽셀 색상 결과를 얻을 수 있습니다.
	color = color * textureColor;

	return color;
}